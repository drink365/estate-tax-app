
# AUTOGENERATED WRAPPER (embedded estate tax app with full simulation)
import streamlit as st
import pandas as pd
import math
import plotly.express as px
from typing import Tuple, Dict, Any, List
from datetime import datetime
from dataclasses import dataclass, field

# ===============================
# 1. 常數與設定
# ===============================
@dataclass
class TaxConstants:
    """遺產稅相關常數"""
    EXEMPT_AMOUNT: float = 1333  # 免稅額
    FUNERAL_EXPENSE: float = 138  # 喪葬費扣除額
    SPOUSE_DEDUCTION_VALUE: float = 553  # 配偶扣除額
    ADULT_CHILD_DEDUCTION: float = 56  # 每位子女扣除額
    PARENTS_DEDUCTION: float = 138  # 父母扣除額
    DISABLED_DEDUCTION: float = 693  # 重度身心障礙扣除額
    OTHER_DEPENDENTS_DEDUCTION: float = 56  # 其他撫養扣除額
    TAX_BRACKETS: List[Tuple[float, float]] = field(
        default_factory=lambda: [
            (5621, 0.1),
            (11242, 0.15),
            (float('inf'), 0.2)
        ]
    )

# ===============================
# 2. 稅務計算邏輯
# ===============================
class EstateTaxCalculator:
    """遺產稅計算器"""

    def __init__(self, constants: TaxConstants):
        self.constants = constants

    def compute_deductions(self, spouse: bool, adult_children: int, other_dependents: int,
                           disabled_people: int, parents: int) -> float:
        """計算總扣除額"""
        spouse_deduction = self.constants.SPOUSE_DEDUCTION_VALUE if spouse else 0
        total_deductions = (
            spouse_deduction +
            self.constants.FUNERAL_EXPENSE +
            (disabled_people * self.constants.DISABLED_DEDUCTION) +
            (adult_children * self.constants.ADULT_CHILD_DEDUCTION) +
            (other_dependents * self.constants.OTHER_DEPENDENTS_DEDUCTION) +
            (parents * self.constants.PARENTS_DEDUCTION)
        )
        return total_deductions

    @st.cache_data
    def calculate_estate_tax(_self, total_assets: float, spouse: bool, adult_children: int,
                             other_dependents: int, disabled_people: int, parents: int) -> Tuple[float, float, float]:
        """計算遺產稅"""
        deductions = _self.compute_deductions(spouse, adult_children, other_dependents, disabled_people, parents)
        if total_assets < _self.constants.EXEMPT_AMOUNT + deductions:
            return 0, 0, deductions
        taxable_amount = max(0, total_assets - _self.constants.EXEMPT_AMOUNT - deductions)
        tax_due = 0.0
        previous_bracket = 0
        for bracket, rate in _self.constants.TAX_BRACKETS:
            if taxable_amount > previous_bracket:
                taxable_at_rate = min(taxable_amount, bracket) - previous_bracket
                tax_due += taxable_at_rate * rate
                previous_bracket = bracket
        return taxable_amount, round(tax_due, 0), deductions

# ===============================
# 3. 模擬試算邏輯
# ===============================
class EstateTaxSimulator:
    """遺產稅模擬試算器"""

    def __init__(self, calculator: EstateTaxCalculator):
        self.calculator = calculator

    def simulate_case(self, total_assets: float, spouse: bool, adult_children: int,
                      other_dependents: int, disabled_people: int, parents: int,
                      premium: int, claim: int, gift: int) -> pd.DataFrame:
        """回傳各策略結果的 DataFrame"""
        # 無規劃
        _, tax_no, _ = self.calculator.calculate_estate_tax(
            total_assets, spouse, adult_children, other_dependents, disabled_people, parents
        )
        net_no = total_assets - tax_no

        # 提前贈與
        eff_gift = max(total_assets - gift, 0)
        _, tax_gift, _ = self.calculator.calculate_estate_tax(
            eff_gift, spouse, adult_children, other_dependents, disabled_people, parents
        )
        net_gift = eff_gift - tax_gift + gift

        # 購買保險
        eff_ins = max(total_assets - premium, 0)
        _, tax_ins, _ = self.calculator.calculate_estate_tax(
            eff_ins, spouse, adult_children, other_dependents, disabled_people, parents
        )
        net_ins = eff_ins - tax_ins + claim

        # 贈與 + 保險（理賠不課稅）
        eff_combo_nt = max(total_assets - gift - premium, 0)
        _, tax_combo_nt, _ = self.calculator.calculate_estate_tax(
            eff_combo_nt, spouse, adult_children, other_dependents, disabled_people, parents
        )
        net_combo_nt = eff_combo_nt - tax_combo_nt + gift + claim

        # 贈與 + 保險（理賠課稅）
        eff_combo_t = max(total_assets - gift - premium + claim, 0)
        _, tax_combo_t, _ = self.calculator.calculate_estate_tax(
            eff_combo_t, spouse, adult_children, other_dependents, disabled_people, parents
        )
        net_combo_t = eff_combo_t - tax_combo_t + gift

        df = pd.DataFrame({
            "規劃策略": [
                "沒有規劃",
                "提前贈與",
                "購買保險",
                "提前贈與＋購買保險",
                "提前贈與＋購買保險（被實質課稅）"
            ],
            "遺產稅（萬）": [int(tax_no), int(tax_gift), int(tax_ins), int(tax_combo_nt), int(tax_combo_t)],
            "家人總共取得（萬）": [int(net_no), int(net_gift), int(net_ins), int(net_combo_nt), int(net_combo_t)]
        })
        base = df.loc[df["規劃策略"] == "沒有規劃", "家人總共取得（萬）"].iloc[0]
        df["規劃效益（相對無規劃）"] = df["家人總共取得（萬）"] - base
        return df

# ===============================
# 5. Streamlit 介面
# ===============================
class EstateTaxUI:
    """介面"""

    def __init__(self, calculator: EstateTaxCalculator, simulator: EstateTaxSimulator):
        self.calculator = calculator
        self.simulator = simulator

    def render_ui(self):
        st.markdown(
            """
            <style>
            body p, body span, body label, body input, body textarea, body select, body button, body li, body a {font-size: 1.05em !important;}
            h1.main-header {font-size: 1.6em !important; text-align: left; color: #000000 !important; margin-bottom: 0.2rem;}
            </style>
            """, unsafe_allow_html=True
        )

        st.markdown("<h1 class='main-header'>遺產稅試算</h1>", unsafe_allow_html=True)
        st.selectbox("選擇適用地區", ["台灣（2025年起）"], index=0)

        with st.container():
            st.markdown("### 請輸入資產及家庭資訊")
            total_assets_input = st.number_input("總資產（萬）", min_value=1000, max_value=100000, value=5000, step=100)
            st.markdown("---")
            st.markdown("##### 家庭成員數")
            has_spouse = st.checkbox("是否有配偶（扣除額 553 萬）", value=False)
            adult_children_input = st.number_input("直系血親卑親屬數（每人 56 萬）", min_value=0, max_value=10, value=0)
            parents_input = st.number_input("父母數（每人 138 萬，最多 2 人）", min_value=0, max_value=2, value=0)
            max_disabled = (1 if has_spouse else 0) + adult_children_input + parents_input
            disabled_people_input = st.number_input("重度以上身心障礙者數（每人 693 萬）", min_value=0, max_value=max_disabled, value=0)
            other_dependents_input = st.number_input("受撫養之兄弟姊妹、祖父母數（每人 56 萬）", min_value=0, max_value=5, value=0)

        # 基礎計算
        taxable_amount, tax_due, total_deductions = self.calculator.calculate_estate_tax(
            total_assets_input, has_spouse, adult_children_input, other_dependents_input, disabled_people_input, parents_input
        )

        st.markdown("### 預估遺產稅：{0:,.0f} 萬元".format(tax_due), unsafe_allow_html=True)

        col1, col2, col3 = st.columns(3)
        with col1:
            st.markdown("**資產概況**")
            st.table(pd.DataFrame({"項目": ["總資產"], "金額（萬）": [int(total_assets_input)]}))
        with col2:
            st.markdown("**扣除項目**")
            df_deductions = pd.DataFrame({
                "項目": ["免稅額","喪葬費扣除額","配偶扣除額","直系血親卑親屬扣除額","父母扣除額","重度身心障礙扣除額","其他撫養扣除額"],
                "金額（萬）": [
                    self.calculator.constants.EXEMPT_AMOUNT,
                    self.calculator.constants.FUNERAL_EXPENSE,
                    self.calculator.constants.SPOUSE_DEDUCTION_VALUE if has_spouse else 0,
                    adult_children_input * self.calculator.constants.ADULT_CHILD_DEDUCTION,
                    parents_input * self.calculator.constants.PARENTS_DEDUCTION,
                    disabled_people_input * self.calculator.constants.DISABLED_DEDUCTION,
                    other_dependents_input * self.calculator.constants.OTHER_DEPENDENTS_DEDUCTION
                ]
            }).astype({"金額（萬）":"int"})
            st.table(df_deductions)
        with col3:
            st.markdown("**稅務計算**")
            st.table(pd.DataFrame({"項目": ["課稅遺產淨額", "預估遺產稅"], "金額（萬）": [int(taxable_amount), int(tax_due)]}))

        st.markdown("---")
        st.markdown("### 模擬試算與效益評估")

        # 預設值邏輯（延續你原本的設計）
        default_premium = int(math.ceil(tax_due / 10) * 10)
        if default_premium > total_assets_input:
            default_premium = total_assets_input
        default_claim = int(default_premium * 1.5)
        default_gift = 244 if (total_assets_input - default_premium) >= 244 else 0

        colA, colB, colC = st.columns(3)
        with colA:
            premium_case = st.number_input("購買保險保費（萬）", min_value=0, max_value=int(total_assets_input), value=int(default_premium), step=100, format="%d")
        with colB:
            claim_case = st.number_input("保險理賠金（萬）", min_value=0, max_value=100000, value=int(default_claim), step=100, format="%d")
        with colC:
            gift_case = st.number_input("提前贈與金額（萬）", min_value=0, max_value=int(max(0, total_assets_input - premium_case)), value=int(min(default_gift, max(0, total_assets_input - premium_case))), step=100, format="%d")

        # 結果表 & 圖
        df_case = self.simulator.simulate_case(
            total_assets= int(total_assets_input),
            spouse= has_spouse,
            adult_children= int(adult_children_input),
            other_dependents= int(other_dependents_input),
            disabled_people= int(disabled_people_input),
            parents= int(parents_input),
            premium= int(premium_case),
            claim= int(claim_case),
            gift= int(gift_case),
        )
        st.markdown("#### 案例模擬結果")
        st.table(df_case)

        fig_bar_case = px.bar(
            df_case, x="規劃策略", y="家人總共取得（萬）",
            title="不同規劃策略下家人總共取得金額比較（案例）", text="家人總共取得（萬）"
        )
        fig_bar_case.update_traces(texttemplate='%{text:.0f}', textposition='outside')
        base = df_case.loc[df_case["規劃策略"] == "沒有規劃", "家人總共取得（萬）"].iloc[0]
        for _, row in df_case.iterrows():
            if row["規劃策略"] != "沒有規劃":
                diff = row["家人總共取得（萬）"] - base
                diff_text = f"+{int(diff)}" if diff >= 0 else f"{int(diff)}"
                fig_bar_case.add_annotation(x=row["規劃策略"], y=row["家人總共取得（萬）"]*0.5, text=diff_text, showarrow=False)
        st.plotly_chart(fig_bar_case, use_container_width=True)

def run_estate():
    constants = TaxConstants()
    calculator = EstateTaxCalculator(constants)
    simulator = EstateTaxSimulator(calculator)
    ui = EstateTaxUI(calculator, simulator)
    ui.render_ui()
